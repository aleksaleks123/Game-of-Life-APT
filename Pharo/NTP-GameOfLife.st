Morph subclass: #GameOfLife	instanceVariableNames: 'size mesh nextMesh statements'	classVariableNames: ''	package: 'NTP-GameOfLife'!!GameOfLife methodsFor: 'drawing' stamp: 'AleksandarNedakovic 7/12/2020 16:32'!drawOn: canvas	| rectangle cellWidth cellHeight cellValue |	cellWidth := self width  / size.	cellHeight := self height / size.	0 to: (size-1) do: [ :i |		0 to: (size-1) do: [ :j |				rectangle := Rectangle left: self bounds left + (cellWidth *j)   				right: self bounds left + (cellWidth *j) + cellWidth 				top: self bounds top + (cellHeight *i)   				bottom: self bounds top + (cellHeight *i) + cellHeight.				cellValue := mesh at: i+1 at: j+1.				cellValue = 1 ifTrue: [canvas frameAndFillRectangle: rectangle 			      fillColor:  (Color white)  borderWidth: 1  borderColor: (Color black)]				ifFalse: [canvas fillRectangle:  rectangle color:  Color black].			 ] ]! !!GameOfLife methodsFor: 'accessing' stamp: 'AleksandarNedakovic 7/12/2020 16:38'!size: n	mesh := Array2D rows: n columns: n.	nextMesh := Array2D rows: n columns: n.	size := n.	self randomiseMesh! !!GameOfLife methodsFor: 'accessing' stamp: 'AleksandarNedakovic 7/12/2020 16:45'!randomiseMesh	1 to: size do: [ :i |		1 to: size do: [ :j |				mesh at: i at: j put: (0 to: 1) atRandom 			]		].	^ self		! !!GameOfLife methodsFor: 'stepping' stamp: 'AleksandarNedakovic 7/12/2020 14:48'!stepTime    ^ 500.! !!GameOfLife methodsFor: 'stepping and presenter' stamp: 'AleksandarNedakovic 7/12/2020 16:47'!step	self updateMesh! !!GameOfLife methodsFor: 'update' stamp: 'AleksandarNedakovic 7/12/2020 17:17'!neighboursOfCellRow: i neighboursOfCellColumn: j	| retval |	retval := 0.	-1 to: 1 do: [ :x | 		-1 to: 1 do: [ :y | 			(x ~= 0) | (y ~= 0) ifTrue:[(mesh at: i-1+x%size+1 at:j-1+y%size+1)=1 ifTrue:[ retval := retval + 1]]			]		].	^ retval! !!GameOfLife methodsFor: 'update' stamp: 'AleksandarNedakovic 7/12/2020 17:12'!updateMesh	1 to: size do: [ :i |		1 to: size do: [ :j |				self updateCellRow: i updateCellColumn: j			]		].	mesh := nextMesh.	self changed.	^ self! !!GameOfLife methodsFor: 'update' stamp: 'AleksandarNedakovic 7/12/2020 17:09'!updateCellRow: cellRow updateCellColumn: cellColumn	|neighbourCount|	neighbourCount:= self neighboursOfCellRow: cellRow neighboursOfCellColumn: cellColumn.	(mesh at: cellRow at: cellColumn) = 1 	 ifTrue: [ (neighbourCount = 2) | (neighbourCount = 3)		 ifTrue: [ nextMesh at:cellRow at:cellColumn put:1 ]		 ifFalse: [ nextMesh at:cellRow at:cellColumn put:0 ]]	 ifFalse: [ neighbourCount = 3		 ifTrue: [ nextMesh at:cellRow at:cellColumn put:1 ]		 ifFalse: [ nextMesh at:cellRow at:cellColumn put:0 ]]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GameOfLife class	instanceVariableNames: ''!!GameOfLife class methodsFor: 'accessing' stamp: 'AleksandarNedakovic 7/12/2020 16:24'!size: n	"comment stating purpose of class-side message"	"scope: class-variables  &  class-instance-variables"					^ GameOfLife new size: n! !